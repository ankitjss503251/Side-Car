# Note: it'll work when server will stop or crash then this conf will redirect traffic to other server. 

server{
        server_name domain_name;
        access_log /var/log/nginx/domain_name;
        error_page   501 502 503 504  @error_page;

        location   @error_page{
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header HOST $http_host;
                proxy_set_header X-NginX-Proxy true;
                #proxy_pass http://127.0.0.1:8000;
                proxy_pass http://XX.XX.XX.XXX:8000;
                proxy_redirect off;
                break;

    } 


        location / {
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header HOST $http_host;
                proxy_set_header X-NginX-Proxy true;
                #proxy_pass http://127.0.0.1:8000;
                proxy_pass http://server_upstream;
                proxy_redirect off;
    } # managed by Certbot

    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length  1000;
    gzip_proxied any;
    gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers 16 8k;




    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/stage3.kiot.io/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/stage3.kiot.io/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

}

server{
    if ($host = domain_name) {
        return 301 https://$host$request_uri;
    } # managed by Certbot


        server_name domain_name;
    listen 80;
    return 404; # managed by Certbot


}

# Note: after this define upstream in nginx.conf



